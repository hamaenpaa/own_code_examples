#include<stdio.h>#include<conio.h>#include<string.h>#include<iostream.h>#include<iomanip.h>#include "apuohj.h"#define spaceja(x) { int tulostettu=0; for(;tulostettu<(x);tulostettu++)\  printf("%c",' '); }#define poista_merkki_ja_tulosta(x) { int pit=strlen(s);for( fkohta = x; \  fkohta < pit ; fkohta++) s[fkohta] = s[fkohta+1]; \  gotoxy( xalku+x, wherey() );printf("%s",s+x);printf(" "); }char lue_jono( char *s , int maxpit )/* s Osoitin korjattavan merkkijonon alkuun *//* maxpit Luettavan merkkijonon maksimipituus *//* Lukee merkkijonon s sen alkuper³isen arvon pohjalta laittaen k³ytt³j³n  *//* korjaamaan sen arvon ja antamaan syätteen³ sen korjatun arvon. Funktio  *//* katsoo syätän tapahtuneen,kun painetaan nuolta yläs tai alas tai enter- *//* n³pp³int³. Ohjelmassa on seuraavat merkkijonon k³sittelytoiminnot:      *//* Insert -lis³ystila , Del - poistaa merkin kursorin alta , nuolet vasem- *//* malle ja oikealle liikuttavat kursoria , Backspace poistaa kursoria     *//* edelt³v³n merkin , Ctrl-E poistaa kursorin alta ja sen j³lkeen tulevat  *//* merkit , Ctrl-J siirt³³ kursorin ensimm³isen merkin kohdalle ja End     *//* luettujen merkkien per³³n , Ctrl-L tyhjent³³ merkkijonon. Ohjelma muut- *//* merkkijonoa samall,kun muutokset n³kyv³t ruudulla ja ruudulla oleva     *//* teksti voi muuttua ainoastaan merkkijonon korjauksessa esiintyv³n suu-  *//* rimman merkkijonon pituuden osalta. Ohjelma sijoittaa merkkijonon kor-  *//* jauspaikan kutsuntahetkell³ olevan kursorinpaikan mukaan siten,ett³ sii-*//* tulee ensimm³isen merkin paikka ja olettaa,ett³ merkkijono mahdutaan    *//* korjailemaan yhdell³ rivill³. Ohjelma palauttaa viimeksi luetun merkin. */{  int insert = 0;        /* Insert-tila, alussa ei p³³ll³  */  int xalku = wherex();  /* Merkkijonon ensimm³isen merkin x-koordinaatti */			 /* ruudulla */  int fkohta;            /* Apumuuttuja merkkijonon s k³sittelyss³ */  int merkki;            /* Luettava merkki */  int kohta=0;           /* Kursorin paikka merkkijonon indeksin mukaan */  int jatkuu=1;          /* Ilmoittaa,onko merkkijono luettu */  printf("%s",s);  while( jatkuu )   {    merkki = getch();    if ( merkki == 0 )	{ merkki = getch();	  switch( merkki ) {	    case 82: insert = 1-insert;break;                /*insert*/	    case 80: case 72: jatkuu = 0;break;              /*pystynuolet*/	    case 77: if ( kohta < strlen(s) ) kohta++;break; /*vasen nuoli*/	    case 75: if ( kohta > 0 ) kohta--;break;         /*oikea nuoli*/	    case 79: kohta = strlen(s);break;                /* End */	    case 83: if ( strlen(s) > 0 )                    /* Del */		       poista_merkki_ja_tulosta(kohta)		     break;	    default: break;	  }	}    else      switch( merkki ) {	case 5 : gotoxy(xalku+kohta,wherey());spaceja(strlen(s)-kohta)		 s[kohta] = '\0';break;       /* Ctrl-E */	case 8 : if ( kohta > 0 )             /* Backspace */		  {		    kohta--;		    poista_merkki_ja_tulosta( kohta )		  }		 break;	case 10: kohta = 0;break;             /* Ctrl-J */	case 12: gotoxy( xalku , wherey() );  /* CTRL-L */		 spaceja( strlen(s) )		 s[0] = '\0';kohta = 0;break;	case 13: jatkuu = 0;break;            /* Enter */	default: if ( merkki > 31 )		   {		     if ((( fkohta = strlen(s) ) < maxpit ) && ( insert ||			( kohta == fkohta )))			{			 for(;fkohta>=kohta;fkohta--) s[fkohta+1] = s[fkohta];			 s[kohta] = merkki;printf("%s",s+kohta);kohta++;			}		     else		       if ( kohta < fkohta )			 { s[kohta] = merkki;printf("%c",merkki);kohta++; }		   }		 break;      }    gotoxy( xalku+kohta, wherey() );   }  return merkki;}void odota_jotakin(){  cout << "Paina jotakin!" << endl;  getch();}void ei_toimi(){  cout << "Ei toimi viel³" << endl;  odota_jotakin();}void viiva(int pit, char merkki ){  for(int i=0;i<pit; i++) cout << merkki;}void otsikko( int valinta, const char *teksti ){  cout << "\n\n\n" << endl;  cout << setw(2) << valinta << ".  " << teksti << endl;  viiva(  2+                    3      +strlen(teksti),'=');  cout << "\n" << endl;}