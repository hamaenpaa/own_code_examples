/* jasenet.cpp *//****************************************************************************//***        J A S E N E T . C P P**** J³senet-luokan toteutus****  Tekij³t:          Vesa Lappalainen**                    Ohjelmointikurssi 1991**  Tehty:            20.12.1991**  Muutettu:         09.12.1995**  Mit³ muutettu:    Muutettu C++ luokaksi**  Muutettu:         10.12.1995**  Mit³ muutettu:    + Laitettu tiedoston lukeminen ja kirjoittaminen**                      toimivaksi (ks. metodit lue_tiedostosta ja talleta)**                    + J³senen lis³ys kasvattaa taulukon kokoa, mik³li**                      tila loppuu (ks. lisaa)**  Muutettu:         20.01.1997**  Mit³ muutettu:    + Otettu kerhosta j³senistän osuus**** Public-metodeja:** ================****  Metodit palauttavat yleens³ virheen merkkijonona, joka voidaan**  suoraan tulostaa.  Jos virhett³ ei tapahdu, palautetaan NULL.****  cJasenet(int koko=0)**    - j³senitän luominen, jos koko = 0, ei luoda j³sentaulukkoa****  ~cJasenet()**    - j³senist³n h³vitt³minen, jos j³senistä³ ei ole talletettu, talletetaan**      viimeist³³n nyt (mahd. virheilmoitus harakoille)****  const char *lisaa(const cJasen &jasen);**    - lis³t³³n uusi j³sen.  J³senest³ tehd³³n kopio.  Jos tila loppuu,**      yritet³³n kasvattaa tilaa.****  const cJasen &anna(int i) const**    - otetaan kerhosta i:s j³sen.  Jos i v³³rin, otetaan 0:s j³sen.**      Kerholaisia voidaan muuttaa, kun otetaan j³senest³ kopio**      anna-metodilla, muutetaan kopion tietoja ja laitetaan takaisin**      korvaa-metodilla:**        cJasen jasen(kerho.anna(i));**        - muuta jasenta**        kerho.korvaa(i,jasen);****  const char *luo(const string &tied,const string &nimi,**    - luo j³senistän uutta kerhoa varten, mahd. vanha talletetaan****  const char *lue(const string &tied);**    - luetaan uusi j³senistä, mahd. vanha talletetaan****  const char *talleta(const string &tied="");**    - talletetaan j³sensist³.  Jos tied=="", k³ytet³³n luettaessa**      annettua nimi³.****  const string &Koko_nimi() const**    - palauttaa tiedoston koko nimen.****  int Lkm() const**    - palauttaa j³senm³³r³n****  const string &Tiedoston_nimi() const**    - paluttaa viimeksi k³ytetyn tiedoston nimen****  int Muutettu() const**    - palauttaa 1, mik³li j³senistä³ on muutettu talletusten j³lkeen ja**      0 muuten.****  int cJasenet::TeeBak(const string &bak_tark)**    - palauttaa 0, mik³li tiedoston muuttaminen bak-tiedostoksi onnistuu**      1 muuten.** ---------------------------------------------------------------------------**** Tietorakenne on seuraava:** =========================******   cJasenet                       cJasen**   ------**   |    |                         ------**   |    |                         |    |**   | 7  | max               |---->|    |**   | 3  |       alkiot      |     |    |  ------**   | o--+------>|-----|     |     ------  |    |**   ------       |  o--+-----|             |    |**                |-----|            |----->|    |**                |  o--+------------|      ------   ------**                |-----|                            |    |**                |  o--+--------------------------->|    |**                |-----|                            |    |**                |  o--+--?                         ------**                |-----|**                |  o--+--?**                |-----|**                |  o--+--?**                |-----|**                |  o--+--?**                |-----|****** J³senet ei tied³ j³seniens³ ominaisuuksia.** J³senistä pit³³ huolta siit³, onko j³senet muuttunut, eli tarvitseeko se** talletusta vaiko ei.** Tiedoston muoto, ks. lue_tiedostosta - metodi***/#include <stdlib.h>#include <fstream.h>#include "mjonotpp.h"#include "jasenet.h"//============================================================================// Makrot://============================================================================//----------------------------------------------------------------------------// Makro, jolla tutkitaan palauttiko kutsu v virheen vai ei ja jos// palautti, niin poistutaan aliohjelmasta palauttaen sama virhe.#define IF_ERR_RETURN(v) { const char *virhe=(v); if ( virhe ) return virhe; }//============================================================================// Virheilmoitukset://============================================================================static const char *EI_VOI_LUODA = "Taulukolle ei saada varattua tilaa muistista!";static const char *LIIKAA_ALKIOITA = "Liikaa alkioita, ei voi lis³t³!";static const char *EI_SAA_ALKIOTA = "Ei saada tilaa uudelle alkiolle muistista!";static const char *EI_NIMEA       = "Ei koko nime³ tiedostossa!";static const char *EI_MAXKOKOA    = "Ei maksimikokoa tiedoston alussa!";static const char *TIED_EI_AUKEA  = "Tiedosto ei aukea!";static const char *OTS_EI_KIRJ    = "Otsikkotietoja ei voi kirjoittaa!";static const char *ALKIO_EI_KIRJ  = "Alkiota ei voi kirjoittaa!";//============================================================================// Private -metodeja://============================================================================//----------------------------------------------------------------------------void cJasenet::poista_taulukko(){  if ( max_lkm > 0 ) free(alkiot);  max_lkm = 0;}//----------------------------------------------------------------------------void cJasenet::poista_alkiot(){  for (int i=0; i<lkm; i++)    delete alkiot[i];  lkm = 0;}//----------------------------------------------------------------------------const char *cJasenet::kasvata_kokoa()/*** Yritet³³n allokoida uutta tilaa 50% maksimim³³r³³n n³hden lis³³.** Paitsi jos vanha koko on 1, niin kasvatetaan 2:ksi.** Jos vanha tila on 0, niin tehd³³n uusi tila.----------------------------------------------------------------------------*/{  if ( max_lkm <= 0 ) return luo_taulukko(2);  int uusi_koko = 3*(max_lkm)/2; if ( uusi_koko <= 1 ) uusi_koko=2;  cJasen **uusi_tila = (cJasen **)realloc(alkiot,uusi_koko*sizeof(cJasen *));  if ( uusi_tila == NULL ) return LIIKAA_ALKIOITA;  alkiot = uusi_tila;  max_lkm = uusi_koko;  return NULL;}//============================================================================// J³senet-luokan public-metodien toteutus://============================================================================//----------------------------------------------------------------------------const char *cJasenet::lisaa(const cJasen &jasen)/*** Lis³t³³n uusi j³sen kerhoon.  EI tarkisteta esiintyykä** nimi jo ennest³³n.  Mik³li tilaa ei ole, yritet³³n allokoida uutta** tilaa 50% maksimim³³r³³n n³hden lis³³.**** Algoritmi: Jos uudelle j³senelle saadaan varattua tilaa, lis³t³³n**            uuden paikan osoite taulukkoon ja kopioidaan tiedot**            uuteen paikkaan.----------------------------------------------------------------------------*/{  if ( lkm >= max_lkm ) IF_ERR_RETURN(kasvata_kokoa());  cJasen *uusi = new cJasen(jasen);  if ( uusi == NULL ) return EI_SAA_ALKIOTA;  alkiot[lkm] = uusi;  lkm++;  muutettu = 1;  return NULL;}//----------------------------------------------------------------------------const char *cJasenet::luo_taulukko(int koko)/*** Luodaan j³sentaulukko valitun kokoiseksi.  Jos j³sentaulukko on ennest³³n** on siell³ on se parasta poistaa.** Luomisessa k³ytet³³n malloc-funktiota, jotta koon muuttaminen on** jatkossa helpompaa realloc-funktiolla. (ks. lisaa-metodi).----------------------------------------------------------------------------*/{  poista_kaikki();  if ( koko <= 0 ) return NULL;  alkiot = (cJasen **)malloc( koko * (sizeof(cJasen *)) );  lkm = 0;  max_lkm = 0;  if ( alkiot == NULL ) return EI_VOI_LUODA;  max_lkm = koko;  return NULL;}//----------------------------------------------------------------------------const char *cJasenet::luo(const string &tied,const string &nimi,int max_koko)/*** Luodaan uusi j³senistä valitulla tiedoston nimell³ ja j³senistän nimell³.** Taulukon yl³rajaksi luodaan max_jas.----------------------------------------------------------------------------*/{  IF_ERR_RETURN(luo_taulukko(max_koko));  tiedoston_nimi = tied;  koko_nimi      = nimi;  muutettu = 1;  return NULL;}//----------------------------------------------------------------------------const char *cJasenet::lue_tiedostosta(const string &tied)/*** Luetaan tiedostosta j³senistän tiedot.**** Metodit olettavat tiedoston olevan seuraavaa muotoa:****Kelmien kerho ry**50**; Kenttien j³rjestys tiedostossa on seuraava:**id|sukunimi etunimi  |sotu       |katuosoite  |postinumero|postiosoite|koti...**1|Ankka Aku          |010245-123U|Ankkakuja 6 |12345      |ANKKALINNA |12-1...**2|Susi Sepe          |020347-123T|            |12555      |Per³mets³  |    ...**3|Ponteva Veli       |030455-3333|            |12555      |Per³mets³  |    ...**<EOF>**** Tiedoston 3. rivilt³ alkaen olevat kommenttirivit (merkitty ;) unohdetaan.**** Taulukon yl³rajaksi luodaan tiedosta 2. rivilt³ luettu max_koko.----------------------------------------------------------------------------*/{  ifstream f(tied.c_str());  if ( !f ) return TIED_EI_AUKEA;  string nimi;  lue_rivi(f,nimi);       if ( !f ) return EI_NIMEA;  int max_koko; lue_rivi(f,max_koko);   if ( !f ) return EI_MAXKOKOA;  IF_ERR_RETURN(luo_taulukko(max_koko));  tiedoston_nimi = tied;  koko_nimi      = nimi;  char rivi[400];  cJasen uusi;  while ( f ) {    lue_rivi(f,rivi,sizeof(rivi)); // Ks. toinen toteutus tarkistu.4/jasemet.cpp    if ( rivi[0] == 0 || rivi[0] == ';' ) continue;    uusi.alusta(rivi);//    f >> uusi;  // vaatisi kunkin rivin olemisen t³ydellisen³, muuten OK!    IF_ERR_RETURN(lisaa(uusi));  }  muutettu = 0;  return NULL;}//----------------------------------------------------------------------------const char *cJasenet::talleta(const string &tied){  if ( !muutettu ) return NULL;  string tiedosto(tied); if ( tied == "" ) tiedosto = tiedoston_nimi;  ofstream f(tiedosto.c_str());  if ( !f ) return TIED_EI_AUKEA;  f << koko_nimi << endl;  f << max_lkm << endl;  if ( !f ) return OTS_EI_KIRJ;  for (int i=0; i<lkm; i++) {    f << *alkiot[i] << endl;    if ( !f ) return ALKIO_EI_KIRJ;  }  muutettu = 0;  tiedoston_nimi = tiedosto;  return NULL;}//----------------------------------------------------------------------------int cJasenet::TeeBak(const string &bak_tark){  bak_nimi = Tiedoston_nimi();  vaihda_tarkennin(bak_nimi,bak_tark);  remove(bak_nimi); /* Vanha .BAK t³ytyy poistaa jotta rename toimii */  return rename(Tiedoston_nimi(),bak_nimi);}